section .data
num1 db 5 ; Define num1 como un byte con valor 5
num2 db 11 ; Define num2 como un byte con valor 11
result db 0 ; Define result como un byte
inicializado a 0
msg db 'Resultado: ', 0 ; Define un mensaje que se mostrará
antes del resultado
section .bss
buffer resb 4 ; Reserva 4 bytes en la sección BSS para
el buffer
section .text
global _start ; Define el punto de entrada del
programa
_start:
mov al, [num1] ; Carga el valor de num1 en el registro
AL
add al, [num2] ; Suma el valor de num2 al registro AL
mov [result], al ; Almacena el resultado de la suma en
result
; Convertir el resultado a ASCII
movzx eax, byte [result]; Carga result en EAX, extendiendo cero
add eax, 48 ; Convierte el valor numérico a su
representación ASCII ('0' = 48)
mov [buffer], al ; Almacena el carácter ASCII en el buffer
; Imprimir el mensaje
mov eax, 4 ; Llamada al sistema para escribir
mov ebx, 1 ; Salida estándar (stdout)
mov ecx, msg ; Mensaje a imprimir
mov edx, 11 ; Longitud del mensaje
int 0x80 ; Interrupción del sistema para ejecutar
la llamada
; Imprimir el resultado
mov eax, 4 ; Llamada al sistema para escribir

mov ebx, 1 ; Salida estándar (stdout)
mov ecx, buffer ; Buffer que contiene el carácter ASCII
mov edx, 1 ; Longitud del carácter a imprimir
int 0x80 ; Interrupción del sistema para ejecutar
la llamada
mov eax, 1 ; Llamada al sistema para salir
xor ebx, ebx ; Código de salida 0
int 0x80 ; Interrupción del sistema para ejecutar
la llamada
